function getDropDownObj(obj)
{
    let { Element, Title, Items, MenuStyle, SubMenuStyle, Type, IsSingleSelect, IsCollapsed, IsSearchable } = obj;
    let dropDownElement = document.getElementById(Element);
    dropDownElement.style.width = "400px";
    dropDownElement.setAttribute("value", IsSingleSelect ? '-1' : '[]');
    let spanTitle = createTitleSpan(Element,Title);
    return {
        Element : dropDownElement,
        Title : spanTitle ,
        IsSingleSelect:IsSingleSelect ?? true ,
        IsCollapsed :IsCollapsed ?? true,
        IsSearchable :IsSearchable ?? true ,
        Type : Type??"Normal" ,
        MenuStyle:MenuStyle ??getStandardMenuStyle() ,
        SubMenuStyle:SubMenuStyle ?? getStandardMenuStyle(),
        Items :Items ,
        SearchElement : IsSearchable?searchInputComponent(Element) :null,
    }
    
}
function drawDropDown(obj) {
    let { Element, Title, Items, MenuStyle, SubMenuStyle, Type, IsSingleSelect, IsCollapsed, SearchElement } = getDropDownObj(obj);
    let menu = createMenu(Items, Element,Title, IsSingleSelect,IsCollapsed ,SearchElement);
    Element.append(Title,menu);
    applyDynamicMenuStyle(MenuStyle || getStandardMenuStyle(),menu);
    applyDynamicMenuStyle(SubMenuStyle || getStandardMenuStyle(), getMenuSubMenusArray(menu));
    if(Type == "Normal")
    {
        showOrHiddenElement(menu);
        dropDownClickEventForSingleSelect(Element, menu);
    }
}
function onChildCheckboxChecked(element,selectedValue,parentCheckBox,subCheckBoxes )
{
    let valuesArray = getDropDownValue(element,false);
    if(!isValueInDropDownValues(selectedValue ,valuesArray))
        console.log(selectedValue);
         valuesArray.push(selectedValue);
    if(subCheckBoxes.every(a=>a.checked))
    {
        parentCheckBox.checked = true;
        if(!isValueInDropDownValues(selectedValue,valuesArray))
            valuesArray.push(parentCheckBox.value);
    }
    setDropDownValue(element ,valuesArray)
    
}
function onChildCheckboxUnchecked(element,selectedValue ,parentCheckBox)
{
    let valuesArray = getDropDownValue(element,false);
    let newValues ;
    if(isValueInDropDownValues(selectedValue,valuesArray))
        newValues = valuesArray.filter(a=>a != Number(e.target.value));
    parentCheckBox.checked = false;
    if(isValueInDropDownValues(parentCheckBox.value))
          newValues = newValues.filter(a=>a != parentCheckBox.value);
    setDropDownValue(element,newValues);
  
}
function onChangeChildrenCheckBox(element,subCheckBoxes,parentCheckBox)
{
    subCheckBoxes.forEach(item =>{
        item.onchange = function(e){
        let selected = e.target ;
            if(selected.checked)
                onChildCheckboxChecked(element,selected.value ,parentCheckBox ,subCheckBoxes)
            else
                onChildCheckboxUnchecked(element,selected.value ,parentCheckBox)
        }
   });
}
function createMenu(items, element,title, isSingleSelect,IsCollapsed ,SearchElement) {
    let ul = document.createElement("ul");
    if(SearchElement)
        ul.append(SearchElement);
    items.forEach(item => {
       let li= createMeunItem(item,element,isSingleSelect,IsCollapsed);
        ul.appendChild(li);
        if(IsCollapsed)
        {
            let subMenu = createMenu(item.Children, element,title,isSingleSelect,IsCollapsed,null);
            let parentCheckBox = li.getElementsByTagName("input")[0];
            let subCheckBoxes = [...subMenu.getElementsByTagName("input")]
            showOrHiddenElement(subMenu);
            OnClickCollapsedParent(li,subMenu);
            if (item.Children.length > 0 ) 
            {
                if(isSingleSelect)
                    onSelectItemSingleSelect(ul,subMenu, element,title);
                if(!isSingleSelect)
                {
                    onChangeParentCheckBox(element ,parentCheckBox,subCheckBoxes,element);
                    onChangeChildrenCheckBox(element, subCheckBoxes,parentCheckBox)
                }
                
                li.appendChild(subMenu);
            }
        }
    
    });
    
    return ul;
}



// //take the div id
// var dropDownObject1 = {
//     //element id can be a string literal value or a function return an html element
//     Element: "",
//     // title can be  a string literal value or function that return a string value to reperesent the title
//     Title: "",
//     // the item can be array of objects or function that return array of object in the next format
//     // [
//     //     {
//     //         Name :"" ,
//     //         Value :"" ,
//     // ParentValue:""
//     //         Children :[
//     //             {
//     //                 name:"",
//     //                 value:"" ,
//     // ParentValue:""

//     //             }
//     //         ]
//     //     }
//     // ]
//     Items :[] ,
//     //the drop down type "Normal" Or "Fixed" The Value Can Be Function Return The Type String Value
//     // the default value for the type is "normal" if it is not declared or have invalid value
//     Type: "Normal",
//     //Is Single Select Can Be A Boolean Value Or Function Return A Boolean Value
//     //the default value for the is single select feature is true
//     IsSingleSelect: Boolean,
//     //the default value for the is collapsed view is false
//     IsCollapsed: Boolean ,
//     //the default value for the is searchable feature is false
//     IsSearchable: Boolean,
//     DefaultValue:"-1" ,
//     //style Object
// };

// //1 - Validate And Get The Object
// //2 - Draw The Object




// function createDropDown(dropDownObject)
// {
//     let obj = getDropDownObj(dropDownObject);
//     if(obj == null) return null;
//     RenderDropDown(obj);
// }

// function RenderDropDown(dropDownObject)
// {

//     let {Element ,Title ,Items ,Type ,IsSingleSelect,IsCollapsed ,IsSearchable ,DefaultValue} = getDropDownObj(dropDownObject) ;
//     let titlePargraph = document.createElement("span");
//     titlePargraph.innerText = Title;
//     Element.appendChild(titlePargraph);
//     Element.setAttribute("value" ,DefaultValue);
//     Element.style.width ="400px" ;
//     Element.style.border ="2px solid black";
//     Element.style.paddingBlock ="15px";
//     let ul =(Type =="Normal") ? createNormalDropDown(Items,Element ,titlePargraph) : createFixedDropDown(Items,Element,titlePargraph);
//     //in the first to make multiple select must override the div on click event to stop when i click on the items and to 
//     // (IsSingleSelect)?   bindSingleSelectEventToMenu(ul,Element,titlePargraph) :bindMultipleSelectEventToElement(ul);
//     if(!IsSingleSelect)
//     {
//         AddCheckBoxesToMenuItems(ul,Element);
//     }
//     // (IsSingleSelect)? bindSingleSelectEventToMenu(ul,Element,titlePargraph): bindMultiSelectEventToMenu(ul,Element)
  
//     Element.appendChild(ul);

// }



// function bindMultiSelectEventToMenu(ul,dropDownElement,titlePargraph)
// {
//     let lis = ul.getElementsByTagName("li");
//     for(index in lis)
//     {
//         //if the user click on the any item will check the check box state if it is enabled or disable 
//         //if it is enable will add it is value to the array else check if it exist and then remove
//         bindMultiSelectEventToMenu(lis[index]);
//     }
//     dropDownElement.onclick = function(e){
//         // dropDownElement.getAttribute("value")
//         //in this event when the user click on the drop down element we will dispear the drop down only in this situaton
//         ul.style.display ="none";
//      }
// }

// function AddCheckBoxesToMenuItems(ul,dropDownElement)
// {
//     let lis = ul.getElementsByTagName("li");
//     for (let index = 0; index < lis.length; index++) {
//         console.log(lis[index]);
//         let checkBox = document.createElement("input");
//         checkBox.type ="checkbox";
//         checkBox.value =lis[index].getAttribute("value"); 
//         lis[index].appendChild(checkBox);
//         lis[index].onclick = function(e){
//             //get the current values in the dropDown element
//             let oldSelectedValues = JSON.parse(dropDownElement.getAttribute("value"));
//             console.log(oldSelectedValues);
//             //before pusing the value we must check in the array if element exist if it is exist remove it and uncheck the checkbox
//             console.log(lis[index].getAttribute("value"));
//             console.log(oldSelectedValues.includes(lis[index].getAttribute("value")));
//             if(oldSelectedValues.includes(lis[index].getAttribute("value")))
//             {
//                 let newValues = oldSelectedValues.filter(value == lis[index].getAttribute("value"));
//                 console.log(newValues);
//                 dropDownElement.setAttribute("value" ,JSON.stringify(newValues));
//                 console.log(JSON.parse(dropDownElement.getAttribute("value")))
//             }
//             else
//             {
//                 oldSelectedValues.push(lis[index].getAttribute("value"));
//                 console.log(JSON.parse(dropDownElement.getAttribute("value")))

//             }
        
//             //set attribute 

//             // oldSelectedValues.forEach(element => {
//             //     console.log(element);
//             //     // if(e.target.value != element)
//             //     // {
//             //     //     selectedValues.push(e.target.value);
//             //     //     dropDownElement.setAttribute("value",selectedValues);
//             //     // }    
//             // }); 

//             //check if the value in the drop down if it is in check the check boix
//             //if the value not in the drop down add it to the drop down values and check the check box
//             //if the user check the check box 
//             // console.log(e.target.getAttribute("value"));
//             //take the value from the input and add it to the dropdownelement value
            
//         }
//     }
// }
// function AddCheckBoxForItem(li)
// {
 
//     let checkBox =document.createElement("input");
//     checkBox.type ="checkbox";
//     // checkBox.value =li.getAttribute("id");
//     li.appendChild(checkBox);
//     // li.appendChild(checkBox);
// }
// function bindSingleSelectEventToMenu(ul,dropDownElement,titlePargraph)
// {
//     let lis = ul.getElementsByTagName("li");
//     dropDownElement.onclick= function(e)
//     {
//         if(e.target == this)
//         {
//             UpdateDropDownUi(ul);
//         }
//     }
//     for( index in lis)
//     {
//         bindSingleSelectEventToItem(lis[index],ul,dropDownElement,titlePargraph,ul);
//     }
// }
// function bindSingleSelectEventToItem(li ,ul,dropDownElement,titlePargraph)
// {
//     li.onclick = function(e){
//         dropDownElement.setAttribute("value",e.target.getAttribute("value"));
//         titlePargraph.innerText = e.target.innerText;
//         UpdateDropDownUi(ul);
//     }
// }
// function UpdateDropDownUi(ul){
//     ul.style.display = (ul.style.display =="none") ?"block" :"none";
// }
// function createNormalDropDown(items,dropDownElement,titleElement){
//     let ul = createMenu();
//     ul.style.display ="none";
//     items.forEach(item => {
//             ul.appendChild(createDropDownItem(item,dropDownElement ,titleElement));
//     });
 
//     return ul;
// }

// function createDropDownItem(itemObj,element )
// {
//     let li = document.createElement("li");
//     li.setAttribute("value" ,`${itemObj.Value}`);
//     let span = document.createElement("span");
//     span.innerText = itemObj.Name;
//     li.appendChild(span);
//     li.setAttribute("id",`${element.id}-${itemObj.Value}`);
//     li.setAttribute("isParent" ,(itemObj.Children.length >0) );
//     li.setAttribute("parentValue" ,itemObj.ParentValue );
//   return li;
// }
// function createFixedDropDown(items , dropDownElement , titleElement)
// {
//   let ul = createMenu();
//   items.forEach(item => {ul.appendChild(createDropDownItem(item,dropDownElement));});
// return ul;
// }
// function createMenu(){
//     let ul = document.createElement("ul");
//     ul.style.borderTop ="1px solid black";
//     ul.style.margin ="0px";
//     ul.style.listStyle="none inside";
//     ul.style.padding ="0px";
//     ul.style.maxHeight ="100px";
//     ul.style.overflowY  = "auto";
//     return ul;
// }
// function getDropDownObj(dropDownObject){
//     let evaluatedObj = null;
//     if(isNotUndefinedOrNull(dropDownObject))
//     {
//         let Element = isStringValue(dropDownObject.Element) ? document.getElementById(dropDownObject.Element) : (IsFunction(dropDownObject.Element) ?dropDownObject.Element():null) ;
//         let Title = isNotEmptyString(dropDownObject.Title) ? dropDownObject.Title : IsFunction(dropDownObject.Title)?dropDownObject.Element():null;
//         let Items= isObjectArray(dropDownObject.Items)? dropDownObject.Items : IsFunction(dropDownObject.Items) ? isObjectArray(dropDownObject.Items())?dropDownObject.Items():null:null;
//         let Type = isStringValue(dropDownObject.Type)? (dropDownObject.Type == "Normal" || dropDownObject.Type =="Fixed")?dropDownObject.Type :"Normal":IsFunction(dropDownObject.Type)? (dropDownObject.Type() == "Normal" || dropDownObject.Type() =="Fixed")?dropDownObject.Type():"Normal":"Normal";
//         let IsSingleSelect = isBooleanValue(dropDownObject.IsSingleSelect) ?dropDownObject.IsSingleSelect :IsFunction(dropDownObject.IsSingleSelect)?isBooleanValue(dropDownObject.IsSingleSelect())?dropDownObject.IsSingleSelect():true:true;
//         let IsCollapsed = isBooleanValue(dropDownObject.IsCollapsed) ?dropDownObject.IsCollapsed :IsFunction(dropDownObject.IsCollapsed)?isBooleanValue(dropDownObject.IsCollapsed())?dropDownObject.IsCollapsed():false:false;
//         let IsSearchable = isBooleanValue(dropDownObject.IsSearchable) ?dropDownObject.IsSearchable :IsFunction(dropDownObject.IsSearchable)?isBooleanValue(dropDownObject.IsSearchable())?dropDownObject.IsSearchable():false:false;
//         let DefaultValue = (IsSingleSelect) ? "-1" :"[]";
        
//         evaluatedObj = {
//             Element : Element ,
//             Title :Title ,
//             Items :Items ,
//             Type :Type ,
//             IsSingleSelect :IsSingleSelect ,
//             IsCollapsed :IsCollapsed ,
//             IsSearchable :IsSearchable  ,
//             DefaultValue :DefaultValue
//         }

//     }
//     return evaluatedObj ;
// }
// function IsFunction(obj)
// {
//     return isNotUndefinedOrNull(obj) && obj.constructor == Function ;
// }
// function isNotEmptyString (obj)
// {
//     return isNotUndefinedOrNull(obj) && obj.trim().length !=0;
// }
// function isStringValue(obj){
//     return isNotUndefinedOrNull(obj) && obj.constructor == String;
// }
// function isNotUndefinedOrNull(obj)
// {
//     return obj != undefined && obj != null ? true :false;
// }
// function isObject(obj)
// {
//     return isNotUndefinedOrNull(obj) // && obj.constructor == Object ;
// }
// function isObjectArray(obj)
// {
//     return isObject(obj)// && Array.isArray(obj);
// }
// function isBooleanValue(obj)
// {
//     return isNotUndefinedOrNull(obj) && obj.constructor == Boolean;
// }
function searchInputComponent(element) {
    let div = document.createElement("div");
    let searchInput = document.createElement("input");
    searchInput.type = "text";
    searchInput.id = `${element}_search`;
    searchInput.Name = "";
    searchInput.placeholder ="search ";
    div.appendChild(searchInput);
    return div;
}
function createTitleSpan(element, title) {
    let titleSpan = document.createElement("span");
    titleSpan.id = `${element.id}_title`;
    titleSpan.innerText = title;
    return titleSpan;
}
function getStandardMenuStyle() {
    return {
        borderTop: "1px solid black",
        margin: "0px",
        listStyle: "none inside",
        padding: "0px",
        maxHeight: "100px",
        overflowY: "auto",
    }
}
function applyDynamicMenuStyle(styleObject, ...ul) {
    ul.forEach((item) => {
        if (item instanceof HTMLUListElement) {
            for (let property in styleObject) {
                item.style[property] = styleObject[property];
            }
        }
    });
}
function getMenuSubMenusArray(menu) {
    return [...menu.getElementsByTagName("ul")];
}
function getMenuItems(menu) {
    return [...menu.getElementsByTagName("li")];
}
function showOrHiddenElement(element) {
    element.style.display = (element.style.display == "none") ? "block" : "none";
}
function dropDownClickEventForSingleSelect(element, ul) {
    element.onclick = function (e) {
       if(e.target ==this || e.target == this.childNodes[0])
        showOrHiddenElement(ul);
    }
}
function createItemCheckBox(item )
{
    let checkBox = document.createElement("input");
        checkBox.type ="checkbox";
        checkBox.value = item.Value;
    return checkBox;
}
function createCollaspedSpan()
{
    let span = document.createElement("span");
    span.innerText="--";
    return span;
}
function createMeunItem(item,element ,isSingleSelect , isCollapsed)
{
    let li = document.createElement('li');
    li.innerText = item.Name;
    li.setAttribute("value", item.Value)
    li.id = `${element.id}_${item.Value}`;
    if(!isSingleSelect)
        li.append(createItemCheckBox(item))
    if(isCollapsed)
        li.append(createCollaspedSpan());
    return li;
}
function OnClickCollapsedParent(parentElement,subMenu)
{
    parentElement.onclick = function(e)
    {
        console.log(this.childNodes)
        if(e.target == this || e.target == this.childNodes[0])
         showOrHiddenElement(subMenu);
    }
}
function onSelectItemSingleSelect(menu,submenu,element,title)
{
    getMenuItems(submenu).forEach(item =>{
        item.onclick = function (e) {
            let selectedItem = e.target;
            if(selectedItem == this)
            {
                title.innerText = this.childNodes[0].textContent;
                element.setAttribute("value",selectedItem.getAttribute("value"));
                showOrHiddenElement(menu);
            }
        }
    })
}
function getDropDownValue(element,isSingleSelect)
{
    return isSingleSelect ?element.getAttribute("value"):JSON.parse(element.getAttribute("value"));
}
function setDropDownValue(element ,value,isSingleSelect)
{
    element.setAttribute("value",JSON.stringify(value));
}
function isValueInDropDownValues(value ,valuesArray)
{
    return valuesArray.includes(Number(value));
}
function onParentCheckBoxChecked(element , selectedValue ,subCheckBoxes)
{
    let valuesArray = getDropDownValue(element ,false);
    if(!isValueInDropDownValues(selectedValue , valuesArray))
                 valuesArray.push(Number(selectedValue));
             subCheckBoxes.forEach(item =>{
                 item.checked =true;
                 if(!isValueInDropDownValues(item.value ,valuesArray))
                     valuesArray.push(Number(item.value));
    });
    setDropDownValue(element, valuesArray);
}
function onParentCheckBoxUnChecked(element ,selectedValue,subCheckBoxes)
{
    let valuesArray = getDropDownValue(element ,false);
    let newValues ;
    if(isValueInDropDownValues(selectedValue,valuesArray))
        newValues = valuesArray.filter(item => item !=selectedValue);
    subCheckBoxes.forEach(item =>{
        item.checked =false;
        if(valuesArray.includes(Number(item.value)))
        {
          newValues = newValues.filter(a => a != item.value);
        }}); 
    setDropDownValue(element ,newValues);
}
function onChangeParentCheckBox(element ,parentCheckBox,subCheckBoxes,element)
{
    parentCheckBox.onchange = function(e)
    {
         let selected = e.target ;
         if(selected.checked)
            onParentCheckBoxChecked(element,selected.value ,subCheckBoxes);
         else
            onParentCheckBoxUnChecked(element,selected.value ,subCheckBoxes);
    }
}
let menuCountry = {
    Element: "menuCountry",
    Title: "Menu Country",
    Items: [
        {
            Name: "Egypt",
            Value: "1",
            Children: [
                {
                    Name: "Damietta",
                    Value: "4",
                    Children: [
                    ]
                },
                {
                    Name: "Cairo",
                    Value: "5",
                    Children: [
                    ]
                }
            ]
        },
        {
            Name: "Saudie Arabia",
            Value: "2",
            Children: [
                {
                    Name: "Ryaid",
                    Value: "6",
                    Children: [

                    ]
                }
            ]
        },
        {
            Name: "Jaban",
            Value: "3",
            Children: [
                {
                    Name: "Tokyo",
                    Value: "7",
                    Children: [

                    ]
                }
            ]
        }
    ],
    Type: "Normal",
    IsSingleSelect: false,
    IsCollapsed: true,
    IsSearchable: false,
    MenuStyle: {
        borderTop: "1px solid black",
        margin: "0px",
        listStyle: "none inside",
        padding: "0px",
        maxHeight: "100px",
        overflowY: "auto",
    },
    SubMenuStyle: {
        listStyle: "none outside",
        maxHeight: "100px",
    }
};
drawDropDown(menuCountry);
console.log(getDropDownObj(menuCountry))
